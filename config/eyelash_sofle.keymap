#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/outputs.h>

#define ZMK_HELPER_KEEP_NATIVE 0
#include "zmk-helpers/helper.h"
#include "joystick.dtsi"

#include "eyelash_sofle_keydefs.dtsi" // Extra key definitions following urob's setup

// - Defaults -

    #define DEFAULT 0
    #define NAV_TXT 1
    #define NAV_APP 2
    #define NAV_SYS 3
    #define OPTIONS 6

    #define QUICK_TAP_MS 175
    &sk {
        release-after-ms = <900>;
        quick-release;
    };
    &sl { // Allow sticky mods to chord across sticky layers.
        ignore-modifiers;
    };
    &lt {
        flavor = "balanced";
        tapping-term-ms = <200>;
        quick-tap-ms = <QUICK_TAP_MS>;
    };
    &mt {
        flavor = "tap-preferred";
        tapping-term-ms = <220>;
        quick-tap-ms = <220>;
        hold-trigger-key-positions = <0>;
    };

    #define MAKE_HRM(NAME, HOLD, TAP, TRIGGER_POS)                              \
    ZMK_HOLD_TAP( NAME, bindings = <HOLD>, <TAP>; flavor = "balanced";        \
                    tapping-term-ms = <280>; quick-tap-ms = <QUICK_TAP_MS>;     \
                    require-prior-idle-ms = <150>;                              \
                    hold-trigger-key-positions = <TRIGGER_POS>;                 \
                    hold-trigger-on-release;                                    \
                )

    MAKE_HRM(hml, &kp, &kp, KEYS_R KEYS_T) // Left-hand HRMs
    MAKE_HRM(hmr, &kp, &kp, KEYS_L KEYS_T) // Right-hand HRMs
    // TODO: not the exact functionality id want because cant add random keys
    MAKE_HRM(hmt, &mo, &kp, KEYS_R KEYS_L KEYS_T) // Thumb HRMs

// - Symbols -

    ZMK_MOD_MORPH(space_m, bindings = <&kp SPACE>, <&kp SPACE>; mods = <(MOD_LSFT|MOD_RSFT)>;)
    ZMK_MOD_MORPH(del_bspc, bindings = <&kp DELETE>, <&kp BACKSPACE>; mods = <(MOD_LSFT|MOD_RSFT)>;)

    // HORIZONTAL COMBOS
    #define COMBO_TERM_FAST 18
    #define COMBO_TERM_SLOW 30
    #define COMBO_IDLE_FAST 150
    #define COMBO_IDLE_SLOW 50

    ZMK_COMBO(tab,    &kp TAB,    LB3 LB2,     DEFAULT, COMBO_TERM_SLOW, COMBO_IDLE_FAST)
    ZMK_COMBO(enter,  &kp ENTER,  LB2 LB1,     DEFAULT, COMBO_TERM_SLOW, COMBO_IDLE_FAST)

    // VERTICAL COMBOS
    #define SHIFT_MORPH(NAME, BINDING1, BINDING2) \
        ZMK_MOD_MORPH(NAME, bindings = <&kp BINDING1>, <&kp BINDING2>; mods = <(MOD_LSFT|MOD_RSFT)>;)
    #define SHIFT_MORPH_COMBO(NAME, BINDING1, BINDING2, POSITION) \
        SHIFT_MORPH(NAME##_morph, BINDING1, BINDING2) \
        ZMK_COMBO(NAME, &NAME##_morph, POSITION, DEFAULT, COMBO_TERM_SLOW, COMBO_IDLE_FAST)

    // LEFT-HAND SYMBOLS --- NOTE: WHEN UPDATING ALSO UPDATE ADAPTIVE KEYS SIDES
    SHIFT_MORPH(        slash_back,         SLASH,               BACKSLASH      )
    SHIFT_MORPH(        minus_undr,         MINUS,               UNDERSCORE     )
    SHIFT_MORPH(        comma_astr,         COMMA,               ASTERISK       )
    SHIFT_MORPH(        dot_,               DOT,                 DOT            )
    SHIFT_MORPH_COMBO(  dquotes_caret,      DOUBLE_QUOTES,       CARET,         LT3 LM3 )
    SHIFT_MORPH_COMBO(  dollar_amp,         DOLLAR,              AMPERSAND,     LT2 LM2 )
    SHIFT_MORPH_COMBO(  semicolon,          SEMICOLON,           SEMICOLON,     LT1 LM1 )
    SHIFT_MORPH_COMBO(  hash_at,            HASH,                AT_SIGN,       LT0 LM0 )
    SHIFT_MORPH_COMBO(  question_pipe,      QUESTION,            PIPE,          LM3 LB3 )
    SHIFT_MORPH_COMBO(  excl_percent,       EXCLAMATION,         PERCENT,       LM2 LB2 )
    SHIFT_MORPH_COMBO(  equal,              EQUAL,               EQUAL,         LM1 LB1 )
    SHIFT_MORPH_COMBO(  esc_,               ESCAPE,              ESCAPE,        LM0 LB0 )

    // RIGHT-HAND COMBOS
    SHIFT_MORPH_COMBO(  tilde,              TILDE,               TILDE,         RT0 RM0 )
    SHIFT_MORPH_COMBO(  colon,              COLON,               COLON,         RT1 RM1 )
    SHIFT_MORPH_COMBO(  lbrc_lt,            LEFT_BRACKET,        LESS_THAN,     RT2 RM2 )
    SHIFT_MORPH_COMBO(  squote_grave,       SINGLE_QUOTE,        GRAVE,         RT3 RM3 )
    SHIFT_MORPH_COMBO(  plus,               PLUS,                PLUS,          RM0 RB0 )
    SHIFT_MORPH_COMBO(  lpar_lbrc,          LEFT_PARENTHESIS,    LEFT_BRACE,    RM1 RB1 )
    SHIFT_MORPH_COMBO(  rbrc_gt,            RIGHT_BRACKET,       GREATER_THAN,  RM2 RB2 )
    SHIFT_MORPH_COMBO(  rpar_rbrc,          RIGHT_PARENTHESIS,   RIGHT_BRACE,   RM3 RB3 )

// - Layer Keys -

    #define SPC_NAV_GUI &hmt NAV_SYS SPACE
    // ZMK_AUTO_LAYER(al_nav_sys, continue-list = <>; ignore-modifiers;)
    // ZMK_AUTO_LAYER(al_nav_app, continue-list = <>; ignore-modifiers;)

    #define ADAPTIVE_RESET 1200
    // Hardcoded, on updating the keymap, the sides have to be adjusted accordingly
    ZMK_ADAPTIVE_KEY(left_arcane, bindings = <&sk LSHFT>;
        repeat {bindings = <&key_repeat>; trigger-keys = <R B Y O U Q C I E A Z SLASH BACKSLASH MINUS UNDERSCORE COMMA ASTERISK DOT DOUBLE_QUOTES CARET DOLLAR AMPERSAND SEMICOLON HASH AT_SIGN QUESTION PIPE EXCLAMATION PERCENT EQUAL ESCAPE>; max-prior-idle-ms = <ADAPTIVE_RESET>;strict-modifiers;};)
        // TODO: Add magic behavior
    ZMK_ADAPTIVE_KEY(right_arcane, bindings = <&sk LSHFT>;  
        repeat {bindings = <&key_repeat>; trigger-keys = <X L D W V K H T N S TILDE COLON LEFT_BRACKET LESS_THAN SINGLE_QUOTE GRAVE PLUS LEFT_PARENTHESIS LEFT_BRACE RIGHT_BRACKET GREATER_THAN RIGHT_PARENTHESIS RIGHT_BRACE>; max-prior-idle-ms = <ADAPTIVE_RESET>;strict-modifiers;};)
        // TODO: Add magic behavior

    //SHIFT_MORPH(left_runic, left_arcane, left_arcane)

    ZMK_MOD_MORPH(left_runic, bindings = <&left_arcane>, <&kp X> /* TODO: Will be leader key not sending out shift */; mods = <(MOD_LSFT|MOD_RSFT)>;)

    //SHIFT_MORPH(right_runic, right_arcane, right_arcane)
    
    #define SPC_NAV_GUI &hmt NAV_SYS SPACE
/ {

    behaviours {
        num_temp: num_temp {compatible = "zmk,behavior-auto-layer"; #binding-cells = <1>; continue-list = <LEFT DOWN UP RIGHT PG_DN PG_UP>; ignore-modifiers; };
        scroll_encoder: scroll_encoder {compatible = "zmk,behavior-sensor-rotate"; #sensor-binding-cells = <0>; bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>; };
        volume_encoder: volume_encoder {compatible = "zmk,behavior-sensor-rotate"; #sensor-binding-cells = <0>; bindings = <&kp C_VOL_UP>, <&kp C_VOL_DN>; };
        rgb_br_encoder: rgb_br_encoder {compatible = "zmk,behavior-sensor-rotate"; #sensor-binding-cells = <0>; bindings = <&rgb_ug RGB_BRD>, <&rgb_ug RGB_BRI>; };
        zoom_encoder: zoom_encoder {compatible = "zmk,behavior-sensor-rotate"; #sensor-binding-cells = <0>; bindings = <&kp LC(MINUS)>, <&kp LC(PLUS)>; };
    };

    keymap { compatible = "zmk,keymap";

        DEFAULT { sensor-bindings = <&volume_encoder>; display-name = "DEFAULT"; bindings = <
//╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮          ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
    &trans        &trans        &trans        &trans        &trans        &trans        &trans     &trans        &trans        &trans        &trans        &trans        &trans
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤          ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
    &trans        &kp B         &kp Y         &kp O         &kp U         &kp Q         &trans     &kp X         &kp L         &kp U         &kp O         &kp B         &trans
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤          ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
    &trans        &hml LGUI C   &hml LCTL I   &hml LALT E   &hml LSFT A   &kp Z         &trans     &kp K         &hmr RSFT A   &hmr RALT E   &hmr RCTL I   &hmr RGUI C   &trans
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤          ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
    &trans        &slash_back   &minus_undr   &comma_astr   &dot_         &del_bspc     &trans     &kp J         &kp M         &kp G         &kp P         &kp F         &trans
//╰─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤          ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────╯
    &kp C_MUTE    &trans        &trans        &trans        SPC_NAV_GUI   &left_runic   &trans     &trans        &kp R         &trans        &trans        &trans
//              ╰─────────────┴─────────────┴─────────────┴─────────────┴─────────────╯          ╰─────────────┴─────────────┴─────────────┴─────────────┴─────────────╯
        >;};

        NAV_TXT { sensor-bindings = <&volume_encoder>; display-name = "NAV_TXT"; bindings = <
//╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮          ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
    &trans        &trans        &trans        &trans        &trans        &trans        &trans     &trans        &trans        &trans        &trans        &trans        &trans
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤          ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
    &trans        &kp N4        &kp N5        &kp N6        &kp N7        &kp N8        &trans     &trans        &kp PG_UP      &kp UP       &kp PG_DN     &trans        &trans
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤          ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
    &trans        &kp N3        &kp N2        &kp N1        &kp N0        &kp N9        &trans     &kp HOME      &kp LEFT      &kp DOWN      &kp RIGHT     &kp END        &trans
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤          ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
    &trans        &trans        &trans        &trans        &trans        &trans        &trans     &trans        &trans        &trans        &trans        &trans
//╰─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤          ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────╯
    &trans        &trans        &trans        &trans        &trans        &trans        &trans     &trans        &trans        &trans        &trans        &trans
//              ╰─────────────┴─────────────┴─────────────┴─────────────┴─────────────╯          ╰─────────────┴─────────────┴─────────────┴─────────────┴─────────────╯
        >;};

//         layer_1 {
//             bindings = <
// &kp GRAVE   &kp F1           &kp F2          &kp F3           &kp F4           &kp F5             &mmv MOVE_UP     &kp F6           &kp F7           &kp F8      &kp F9     &kp F10           &trans
// &trans      &kp GRAVE        &mkp LCLK       &mkp MCLK        &mkp RCLK        &mkp MB4           &mmv MOVE_DOWN   &kp PG_UP        &kp END          &kp UP      &kp HOME   &kp MINUS         &kp EQUAL
// &trans      &kp TILDE        &trans          &trans           &trans           &mkp MB5           &mmv MOVE_LEFT   &kp PG_DN        &kp LEFT         &kp DOWN    &kp RIGHT  &kp LEFT_BRACKET  &kp RIGHT_BRACKET
// &trans      &rgb_ug RGB_OFF  &rgb_ug RGB_ON  &rgb_ug RGB_EFF  &rgb_ug RGB_EFR  &rgb_ug RGB_SPI    &mmv MOVE_RIGHT  &rgb_ug RGB_BRI  &rgb_ug RGB_BRD  &kp INSERT  &kp F11    &kp F12           &trans
// &kp C_MUTE  &trans           &trans          &trans           &trans           &trans             &mkp LCLK        &trans           &trans           &trans      &trans     &trans
//             >;

//             display-name = "layer1";
//             sensor-bindings = <&scroll_encoder>;
//         };

//         layer_2 {
//             bindings = <
// &kp TILDE  &bt BT_SEL 0  &bt BT_SEL 1    &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &mmv MOVE_UP     &kp F6  &kp F7  &kp F8      &kp F9     &kp F10      &trans
// &trans     &bt BT_CLR    &bt BT_CLR_ALL  &trans        &trans        &trans          &mmv MOVE_DOWN   &trans  &trans  &kp F11     &kp F12    &kp UNDER    &kp PLUS
// &trans     &out OUT_USB  &out OUT_BLE    &trans        &trans        &trans          &mmv MOVE_LEFT   &trans  &trans  &trans      &trans     &kp LBRC     &kp RBRC
// &trans     &sys_reset    &trans          &bootloader   &trans        &trans          &mmv MOVE_RIGHT  &trans  &trans  &sys_reset  &soft_off  &bootloader  &trans
// &trans     &trans        &trans          &trans        &trans        &trans          &mkp LCLK        &trans  &trans  &trans      &trans     &trans
//             >;

//             sensor-bindings = <&scroll_encoder>;
//         };

//         layer_3 {
//             bindings = <
// &trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
// &trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
// &trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
// &trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
// &trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
//             >;
//         };
    };
};