#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/outputs.h>

#define ZMK_HELPER_KEEP_NATIVE 0
#include "zmk-helpers/helper.h"
#include "joystick.dtsi"

#include "eyelash_sofle_keydefs.dtsi" // Extra key definitions following urob's setup

// - Defaults -

    #define DEFAULT 0
    #define NAV_TXT 1
    #define NAV_APP 2
    #define NAV_SYS 3
    #define OPTIONS 4

    #define QUICK_TAP_MS 175
    &sk {
        release-after-ms = <900>;
        quick-release;
    };
    &sl { // Allow sticky mods to chord across sticky layers.
        ignore-modifiers;
    };
    &lt {
        flavor = "balanced";
        tapping-term-ms = <200>;
        quick-tap-ms = <QUICK_TAP_MS>;
    };
    &mt {
        flavor = "tap-preferred";
        tapping-term-ms = <220>;
        quick-tap-ms = <220>;
        hold-trigger-key-positions = <0>;
    };
    &caps_word {
        continue-list = <UNDERSCORE MINUS>;
    };
    &key_repeat {
        usage-pages = <HID_USAGE_KEY HID_USAGE_CONSUMER>;
    };

// - Setup Definitions -
// TODO: spc shift, nav combos for app nav, no magic

    // Hardcoded, on updating the keymap, the sides have to be adjusted accordingly
    #define LEFT_CHARS B Y O U Q C I E A Z
    #define LEFT_SYMBS SLASH BACKSLASH MINUS UNDERSCORE COMMA ASTERISK DOT DOUBLE_QUOTES CARET DOLLAR AMPERSAND SEMICOLON HASH AT_SIGN QUESTION PIPE EXCLAMATION PERCENT EQUAL ESCAPE
    #define RIGHT_CHARS J L D W V K H T N S X M G P F
    #define RIGHT_SYMBS TILDE COLON LEFT_BRACKET LESS_THAN SINGLE_QUOTE GRAVE PLUS LEFT_PARENTHESIS LEFT_BRACE RIGHT_BRACKET GREATER_THAN RIGHT_PARENTHESIS RIGHT_BRACE
    #define NUM_CHARS N0 N1 N2 N3 N4 N5 N6 N7 N8 N9
    #define ADAPTIVE_RESET 1200
    #define COMBO_TERM_FAST 30
    #define COMBO_TERM_SLOW 250
    #define COMBO_IDLE_FAST 30
    #define COMBO_IDLE_SLOW 150
    #define SHIFT_MORPH(NAME, BINDING1, BINDING2) \
        ZMK_MOD_MORPH(NAME, bindings = <BINDING1>, <BINDING2>; mods = <(MOD_LSFT|MOD_RSFT)>;)
    #define SHIFT_MORPH_COMBO(NAME, BINDING1, BINDING2, POSITION) \
        SHIFT_MORPH(NAME##_morph, BINDING1, BINDING2) \
        ZMK_COMBO(NAME, &NAME##_morph, POSITION, DEFAULT NAV_TXT, COMBO_TERM_SLOW, COMBO_IDLE_FAST)

    #define MAKE_HRM(NAME, HOLD, TAP, TRIGGER_POS)                                  \
        ZMK_HOLD_TAP( NAME, bindings = <HOLD>, <TAP>; flavor = "balanced";          \
                        tapping-term-ms = <200>; quick-tap-ms = <QUICK_TAP_MS>;     \
                        require-prior-idle-ms = <150>;                              \
                        hold-trigger-key-positions = <TRIGGER_POS>;                 \
                        hold-trigger-on-release;                                    \
                    )
    #define MAKE_HMT(NAME, HOLD, TAP) \
        MAKE_HRM(NAME, HOLD, TAP, KEYS_R KEYS_L KEYS_T)
    MAKE_HRM(hml, &kp, &kp, KEYS_R LB0 KEYS_T) // Left-hand HRMs, same hand mod+key for del_bspc
    MAKE_HRM(hmr, &kp, &kp, KEYS_L KEYS_T) // Right-hand HRMs
    MAKE_HRM(hmt, &mo, &kp, KEYS_R KEYS_L KEYS_T) // Tap mod, hold key

// - Layers -

    #define NUM_WORD &num_word NAV_TXT
        ZMK_AUTO_LAYER(num_word, continue-list = <NUM_CHARS SLASH MINUS COMMA DOT>; ignore-modifiers;)

    #define SPC_NAV_SYS &hmt NAV_SYS SPACE

    #define RUNE_L &hm_rune_l LSHIFT 0
        ZMK_MOD_MORPH(rune_l, bindings = <&sk LSHIFT>, <NUM_WORD>; mods = <(MOD_LSFT|MOD_RSFT)>;)
        MAKE_HRM(hm_rune_l, &kp, &rune_l, KEYS_R KEYS_L KEYS_T_R) // Tap mod, hold runic left

    SHIFT_MORPH_COMBO( spc_sft_morph, &spc_sft, &num_word_sft, LH1 LH0 )
    ZMK_MACRO(spc_sft, bindings = <&kp SPACE &sk LSHIFT>; wait-ms = <0>; tap-ms = <5>;)
    ZMK_MACRO(num_word_sft, bindings = <NUM_WORD &sk LSHIFT>; wait-ms = <0>; tap-ms = <5>;)
    
    #define R_NAV_TXT &hmt NAV_TXT R
    #define RUNE_R &hm_rune_r LSHIFT 0
        ZMK_ADAPTIVE_KEY(shift_repeat, bindings = <&key_repeat>;
            spc_sft {bindings = <&sk LSHIFT>; trigger-keys = <SPACE>; max-prior-idle-ms = <ADAPTIVE_RESET>;};
        )
        ZMK_MOD_MORPH(rune_r, bindings = <&shift_repeat>, <&shift_repeat>; mods = <(MOD_LSFT|MOD_RSFT)>;)
        MAKE_HRM(hm_rune_r, &kp, &rune_r, KEYS_R KEYS_L KEYS_T_L) // Tap key, hold runic right

    SHIFT_MORPH_COMBO(repeat_r_morph, &repeat_r, &repeat_r, RH0 RH1 )
    ZMK_ADAPTIVE_KEY(repeat_r, bindings = <&double_r>;
        tab_tab_r {bindings = <&tab_r>; trigger-keys = <TAB>; max-prior-idle-ms = <ADAPTIVE_RESET>;};
    )
    ZMK_MACRO(double_r, bindings = <&kp R &kp R>; wait-ms = <0>; tap-ms = <5>;)
    ZMK_MACRO(tab_r, bindings = <&kp TAB &kp R>; wait-ms = <0>; tap-ms = <5>;)
    
    #define MAGIC &magic_morph
        ZMK_MOD_MORPH(magic_morph, bindings = <&magic>, <&magic>; mods = <(MOD_LSFT|MOD_RSFT)>;) // no magic_shifted added
        ZMK_ADAPTIVE_KEY(magic, bindings = <&sk LSHIFT>;
            // Alpha SFBs
            r_repeat {bindings = <&kp R>; trigger-keys = <R>; max-prior-idle-ms = <ADAPTIVE_RESET>;};
            bc {bindings = <&kp C>; trigger-keys = <B>; max-prior-idle-ms = <ADAPTIVE_RESET>;}; 
            cb {bindings = <&kp B>; trigger-keys = <C>; max-prior-idle-ms = <ADAPTIVE_RESET>;}; 
            yi {bindings = <&kp I>; trigger-keys = <Y>; max-prior-idle-ms = <ADAPTIVE_RESET>;}; 
            iy {bindings = <&kp Y>; trigger-keys = <I>; max-prior-idle-ms = <ADAPTIVE_RESET>;}; 
            oe {bindings = <&kp E>; trigger-keys = <O>; max-prior-idle-ms = <ADAPTIVE_RESET>;}; 
            eo {bindings = <&kp O>; trigger-keys = <E>; max-prior-idle-ms = <ADAPTIVE_RESET>;}; 
            au {bindings = <&kp U>; trigger-keys = <A>; max-prior-idle-ms = <ADAPTIVE_RESET>;}; 
            ua {bindings = <&kp A>; trigger-keys = <U>; max-prior-idle-ms = <ADAPTIVE_RESET>;}; 
            qu {bindings = <&kp U>; trigger-keys = <Q>; max-prior-idle-ms = <ADAPTIVE_RESET>;}; 
            za {bindings = <&kp A>; trigger-keys = <Z>; max-prior-idle-ms = <ADAPTIVE_RESET>;}; 
            kl {bindings = <&kp L>; trigger-keys = <K>; max-prior-idle-ms = <ADAPTIVE_RESET>;}; 
            hm {bindings = <&kp M>; trigger-keys = <H>; max-prior-idle-ms = <ADAPTIVE_RESET>;}; 
            lk {bindings = <&kp K>; trigger-keys = <L>; max-prior-idle-ms = <ADAPTIVE_RESET>;}; 
            ml {bindings = <&kp L>; trigger-keys = <M>; max-prior-idle-ms = <ADAPTIVE_RESET>;}; 
            jk {bindings = <&kp K>; trigger-keys = <J>; max-prior-idle-ms = <ADAPTIVE_RESET>;}; 
            xm {bindings = <&kp M>; trigger-keys = <X>; max-prior-idle-ms = <ADAPTIVE_RESET>;}; 
            dg {bindings = <&kp G>; trigger-keys = <D>; max-prior-idle-ms = <ADAPTIVE_RESET>;}; 
            gt {bindings = <&kp T>; trigger-keys = <G>; max-prior-idle-ms = <ADAPTIVE_RESET>;}; 
            td {bindings = <&kp D>; trigger-keys = <T>; max-prior-idle-ms = <ADAPTIVE_RESET>;}; 
            np {bindings = <&kp P>; trigger-keys = <N>; max-prior-idle-ms = <ADAPTIVE_RESET>;}; 
            pn {bindings = <&kp N>; trigger-keys = <P>; max-prior-idle-ms = <ADAPTIVE_RESET>;}; 
            wn {bindings = <&kp N>; trigger-keys = <W>; max-prior-idle-ms = <ADAPTIVE_RESET>;}; 
            sf {bindings = <&kp F>; trigger-keys = <S>; max-prior-idle-ms = <ADAPTIVE_RESET>;}; 
            fs {bindings = <&kp S>; trigger-keys = <F>; max-prior-idle-ms = <ADAPTIVE_RESET>;}; 
            vs {bindings = <&kp S>; trigger-keys = <V>; max-prior-idle-ms = <ADAPTIVE_RESET>;}; 
            dot_spc_sft {bindings = <&sk LSHIFT>; trigger-keys = <DOT>; max-prior-idle-ms = <ADAPTIVE_RESET>;};
            quote_n {bindings = <&kp N>; trigger-keys = <SINGLE_QUOTE>; max-prior-idle-ms = <ADAPTIVE_RESET>;};
            greater_parenthesis {bindings = <&parenthesis>; trigger-keys = <GREATER_THAN>; max-prior-idle-ms = <ADAPTIVE_RESET>;};
            colon_enter {bindings = <&kp ENTER>; trigger-keys = <COLON>; max-prior-idle-ms = <ADAPTIVE_RESET>;};
            equal_parenthesis {bindings = <&paran_brace_morph>; trigger-keys = <EQUAL>; max-prior-idle-ms = <ADAPTIVE_RESET>;};
        )
        ZMK_MOD_MORPH(paran_brace_morph, bindings = <&paranthesis>, <&braces>; mods = <(MOD_LSFT|MOD_RSFT)>;)
        ZMK_MACRO(parenthesis, bindings = <&kp SPACE &kp LEFT_PARENTHESIS>; wait-ms = <0>; tap-ms = <5>;)
        ZMK_MACRO(braces, bindings = <&kp SPACE &kp LEFT_BRACE>; wait-ms = <0>; tap-ms = <5>;)

        // instead of magic shifted, have morphs for the functionality
        // ZMK_ADAPTIVE_KEY(magic_shifted, bindings = <&magic>;
        //     equal_braces {bindings = <&braces>; trigger-keys = <EQUAL>; max-prior-idle-ms = <ADAPTIVE_RESET>;};
        //     greater_braces {bindings = <&braces>; trigger-keys = <GREATER_THAN>; max-prior-idle-ms = <ADAPTIVE_RESET>;};
        // )

    SHIFT_MORPH_COMBO(spc_sft_morph, &magic_r, &magic_r, RH1 RH2 )
    ZMK_MACRO(magic_r, bindings = <&magic &kp R>; wait-ms = <0>; tap-ms = <5>;) // not 2-way

// - Symbols -

    ZMK_MOD_MORPH(del_bspc, bindings = <&kp DELETE>, <&kp BACKSPACE>; mods = <(MOD_LSFT|MOD_RSFT)>;)

    ZMK_COMBO(tab,    &kp TAB,    LB2 LB1,     DEFAULT, COMBO_TERM_SLOW, COMBO_IDLE_FAST)
    ZMK_COMBO(enter,  &kp ENTER,  LB3 LB2,     DEFAULT, COMBO_TERM_SLOW, COMBO_IDLE_FAST)

    ZMK_MACRO(ent_tab_macro, bindings = <&kp ENTER &kp TAB>; wait-ms = <0>; tap-ms = <5>;)
    ZMK_COMBO(ent_tab, &ent_tab_macro, LB3 LB2 LB1, DEFAULT, COMBO_TERM_SLOW, COMBO_IDLE_FAST)

    // LEFT-HAND SYMBOLS --- NOTE: WHEN UPDATING ALSO UPDATE ADAPTIVE KEYS SIDES
    SHIFT_MORPH(        colon_semi,         &kp COLON,               &kp SEMICOLON       )
    SHIFT_MORPH(        slash_back,         &kp SLASH,               &kp BACKSLASH      )
    SHIFT_MORPH(        minus_plus,         &kp MINUS,               &kp PLUS     )
    SHIFT_MORPH(        dot_,               &kp DOT,                 &kp DOT            )
    SHIFT_MORPH_COMBO(  dquotes_caret,      &kp DOUBLE_QUOTES,       &kp CARET,         LT3 LM3 )
    SHIFT_MORPH_COMBO(  dollar_amp,         &kp DOLLAR,              &kp AMPERSAND,     LT2 LM2 )
    SHIFT_MORPH_COMBO(  commas,             &kp COMMA,               &kp COMMA,         LT1 LM1 )
    SHIFT_MORPH_COMBO(  hash_tilde,         &kp HASH,                &kp TILDE,         LT0 LM0 )
    SHIFT_MORPH_COMBO(  question_pipe,      &kp UNDERSCORE,          &kp PIPE,          LM3 LB3 )
    SHIFT_MORPH_COMBO(  asterisks,          &kp ASTERISK,            &kp ASTERISK,      LM2 LB2 )
    SHIFT_MORPH_COMBO(  excl_question,      &kp EXCLAMATION,         &kp QUESTION,      LM1 LB1 )
    SHIFT_MORPH_COMBO(  esc_,               &kp ESCAPE,              &kp ESCAPE,        LM0 LB0 )

    // RIGHT-HAND COMBOS
    SHIFT_MORPH_COMBO(  perc_at,            &kp PERCENT,             &kp AT_SIGN,       RT0 RM0 )
    SHIFT_MORPH_COMBO(  lpar_lbrc,          &kp LEFT_PARENTHESIS,    &kp LEFT_BRACE,    RT1 RM1 )
    SHIFT_MORPH_COMBO(  rpar_rbrc,          &kp RIGHT_PARENTHESIS,   &kp RIGHT_BRACE,   RT2 RM2 )
    SHIFT_MORPH_COMBO(  squote_grave,       &kp SINGLE_QUOTE,        &kp GRAVE,         RT3 RM3 )
    SHIFT_MORPH_COMBO(  plus,               &kp PLUS,                &kp PLUS,          RM0 RB0 ) // TODO: leader key
    SHIFT_MORPH_COMBO(  eq_eq,              &kp EQUAL,               &kp EQUAL,         RM1 RB1 )
    SHIFT_MORPH_COMBO(  lbrc_lt,            &kp LEFT_BRACKET,        &kp LESS_THAN,     RM2 RB2 )
    SHIFT_MORPH_COMBO(  rbrc_gt,            &kp RIGHT_BRACKET,       &kp GREATER_THAN,  RM3 RB3 )

/ {

    behaviours {
        num_temp: num_temp {compatible = "zmk,behavior-auto-layer"; #binding-cells = <1>; continue-list = <LEFT DOWN UP RIGHT PG_DN PG_UP>; ignore-modifiers; };
        scroll_encoder: scroll_encoder {compatible = "zmk,behavior-sensor-rotate"; #sensor-binding-cells = <0>; bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>; };
        volume_encoder: volume_encoder {compatible = "zmk,behavior-sensor-rotate"; #sensor-binding-cells = <0>; bindings = <&kp C_VOL_UP>, <&kp C_VOL_DN>; };
        rgb_br_encoder: rgb_br_encoder {compatible = "zmk,behavior-sensor-rotate"; #sensor-binding-cells = <0>; bindings = <&rgb_ug RGB_BRD>, <&rgb_ug RGB_BRI>; };
        zoom_encoder: zoom_encoder {compatible = "zmk,behavior-sensor-rotate"; #sensor-binding-cells = <0>; bindings = <&kp LC(MINUS)>, <&kp LC(PLUS)>; };
    };

    keymap { compatible = "zmk,keymap";

        DEFAULT { sensor-bindings = <&volume_encoder>; display-name = "DEFAULT"; bindings = <
//╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮          ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
    &kp F1        &kp F2        &kp F3        &kp F4        &kp F5        &kp F6        &trans     &kp F7        &kp F8        &kp F9        &kp F10       &kp F11       &kp F12
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤          ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
    &kp PSCRN     &kp B         &kp Y         &kp O         &kp U         &kp Q         &trans     &kp Z         &kp L         &kp D         &kp W         &kp V         &trans
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤          ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
    &trans        &hml LGUI C   &hml LCTL I   &hml LALT E   &hml LSFT A   &kp X         &trans     &kp K         &hmr RSFT H   &hmr RALT T   &hmr RCTL N   &hmr RGUI S   &trans
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤          ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
    &trans        &slash_back   &minus_plus   &colon_semi   &dot_         &del_bspc     &trans     &kp J         &kp M         &kp G         &kp P         &kp F         &trans
//╰─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤          ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────╯
    &kp C_MUTE    &mo OPTIONS   &trans        &trans        SPC_NAV_SYS   RUNE_L        &kp X      RUNE_R        R_NAV_TXT     MAGIC         &trans        &trans
//              ╰─────────────┴─────────────┴─────────────┴─────────────┴─────────────╯          ╰─────────────┴─────────────┴─────────────┴─────────────┴─────────────╯
        >;};

        NAV_TXT { sensor-bindings = <&volume_encoder>; display-name = "NAV_TXT"; bindings = <
//╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮          ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
    &trans        &trans        &trans        &trans        &trans        &trans        &trans     &trans        &trans        &trans        &trans        &trans        &trans
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤          ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
    &trans        &kp N4        &kp N5        &kp N6        &kp N7        &kp N8        &trans     &kp PG_UP     &kp RIGHT     &kp END       &trans        &trans        &trans       
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤          ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
    &trans        &hml LGUI N3  &hml LCTL N2  &hml LALT N1  &hml LSFT N0  &kp N9        &trans     &kp UP        &kp LEFT      &kp HOME      &trans        &trans        &trans
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤          ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
    &trans        &trans        &trans        &trans        &trans        &trans        &trans     &kp DOWN      &kp PG_DN     &trans        &trans        &trans        &trans
//╰─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤          ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────╯
    &trans        &trans        &trans        &trans        &trans        &trans        &trans     &trans        &trans        &trans        &trans        &trans
//              ╰─────────────┴─────────────┴─────────────┴─────────────┴─────────────╯          ╰─────────────┴─────────────┴─────────────┴─────────────┴─────────────╯
        >;};

        NAV_APP { sensor-bindings = <&volume_encoder>; display-name = "NAV_APP"; bindings = <
//╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮        ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
    &trans        &trans        &trans        &trans        &trans        &trans        &trans   &trans        &trans        &trans        &trans        &trans        &trans
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤        ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
    &trans        &kp LC(N4)    &kp LC(N5)    &kp LC(N6)    &kp LC(N7)    &kp LC(N8)    &trans   &trans        &trans        &trans        &trans        &trans        &trans
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤        ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
    &trans        &kp LC(N3)    &kp LC(N2)    &kp LC(N1)    &kp LC(TAB)   &kp LC(N9)    &trans   &trans        &trans        &trans        &trans        &trans        &trans
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤        ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
    &trans        &trans        &trans        &trans        &trans        &trans        &trans   &trans        &trans        &trans        &trans        &trans        &trans
//╰─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤        ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────╯
    &trans        &trans        &trans        &trans        &trans        &trans        &trans   &trans        &trans        &trans        &trans        &trans
//              ╰─────────────┴─────────────┴─────────────┴─────────────┴─────────────╯        ╰─────────────┴─────────────┴─────────────┴─────────────┴─────────────╯
        >;};

        NAV_SYS { sensor-bindings = <&volume_encoder>; display-name = "NAV_SYS"; bindings = <
//╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮        ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
    &trans        &trans        &trans        &trans        &trans        &trans        &trans   &trans        &trans        &trans        &trans        &trans        &trans
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤        ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
    &trans        &kp LG(N4)    &kp LG(N5)    &kp LG(N6)    &kp LG(N7)    &kp LG(N8)    &trans   &trans        &trans        &trans        &trans        &trans        &trans
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤        ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
    &trans        &kp LG(N3)    &kp LG(N2)    &kp LG(N1)    &kp LG(TAB)   &kp LG(N9)    &trans   &trans        &trans        &trans        &trans        &trans        &trans
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤        ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
    &trans        &kp LC(C)     &kp LC(X)     &kp LC(V)     &kp LC(Z)     &kp LC(Y)     &trans   &trans        &trans        &trans        &trans        &trans        &trans
//╰─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤        ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────╯
    &trans        &trans        &trans        &trans        &trans        &trans        &trans   &trans        &trans        &trans        &trans        &trans
//              ╰─────────────┴─────────────┴─────────────┴─────────────┴─────────────╯        ╰─────────────┴─────────────┴─────────────┴─────────────┴─────────────╯
        >;};

        OPTIONS { sensor-bindings = <&volume_encoder>; display-name = "OPTIONS"; bindings = <
//╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮        ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
    &trans        &trans        &trans        &trans        &trans        &trans        &trans   &trans        &trans        &trans        &trans        &trans        &trans
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤        ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
    &trans        &trans        &trans        &trans        &trans        &trans        &trans   &trans        &trans        &trans        &trans        &trans        &trans
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤        ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
    &trans        &bt BT_SEL 3  &bt BT_SEL 2  &bt BT_SEL 1  &bt BT_SEL 0  &sys_reset    &trans   &sys_reset    &trans        &trans        &trans        &trans        &trans
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤        ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
    &trans       &bt BT_CLR_ALL &bt BT_CLR    &out OUT_USB  &out OUT_BLE  &bootloader   &trans   &bootloader   &trans        &trans        &trans        &trans        &trans
//╰─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤        ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────╯
    &trans        &trans        &trans        &trans        &trans        &trans        &trans   &trans        &trans        &trans        &trans        &trans
//              ╰─────────────┴─────────────┴─────────────┴─────────────┴─────────────╯        ╰─────────────┴─────────────┴─────────────┴─────────────┴─────────────╯
        >;};

        QWERTY { sensor-bindings = <&volume_encoder>; display-name = "OPTIONS"; bindings = <
//╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮        ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
    &trans        &trans        &trans        &trans        &trans        &trans        &trans   &trans        &trans        &trans        &trans        &trans        &trans
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤        ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
    &trans        &kp Q         &kp W         &kp E         &kp R         &kp T         &trans   &kp Y         &kp U         &kp I         &kp O         &kp P         &trans
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤        ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
    &trans        &kp A         &kp S         &kp D         &kp F         &kp G         &trans   &kp H         &kp J         &kp K         &kp L         &kp SEMI      &trans
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤        ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
    &trans        &kp Z         &kp X         &kp C         &kp V         &kp B         &trans   &kp N         &kp M         &kp COMMA     &kp DOT       &kp FSLH      &trans
//╰─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤        ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────╯
    &trans        &trans        &trans        &trans        &trans        &trans        &trans   &trans        &trans        &trans        &trans        &trans       
//              ╰─────────────┴─────────────┴─────────────┴─────────────┴─────────────╯        ╰─────────────┴─────────────┴─────────────┴─────────────┴─────────────╯
        >;};
    };
};